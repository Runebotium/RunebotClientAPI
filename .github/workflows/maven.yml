name: Build Release

on:
  push:
    branches:
      - main

permissions:
  contents: write


jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      # gradle build
      - name: Make Gradle Wrapper Executable
        run: chmod +x ./gradlew

      # lets check our version before we build

      - name: Build with Gradle
        run: ./gradlew version > version.txt

      - name: Check version file contents
        run: cat version.txt

      - name: version not blank
        run: if [ -s version.txt ]; then echo "version.txt is not empty"; else echo "version.txt is empty"; exit 1; fi

      - name: Build with Gradle
        run: ./gradlew fatJar

      - name: Set output to env
        run: echo "version=$(grep -o 'v[0-9]\+\.[0-9]\+\.[0-9]\+' version.txt | head -n 1)" >> $GITHUB_ENV
        id:  version


      - name: log the output version
        run: echo ${{ steps.version.outputs.version }}


      # upload build artifacts
      - name: List build/libs contents
        run: ls -R build/libs

      - name: Archive build artifacts
        uses: actions/upload-artifact@v3
        with:
         name: build-artifacts
         path: |
          build/libs/
          version.txt

  release:
      needs: build
      if: ${{ success() }}
      runs-on: ubuntu-latest
      steps:
        - name: Read version output
          run: echo "Version is $VERSION"

        - name: Checkout code
          uses: actions/checkout@v3

        - name: Download build artifacts
          uses: actions/download-artifact@v3
          with:
            name: build-artifacts

        # output the version
        - name: log the output version
          run: echo ${{ steps.version.outputs.version }}
        # check the version is valid
        - name: Check version is valid
          run: |
            if [ -z "$VERSION" ]; then
              echo "Version not found."
              exit 1
            fi

        - name: Bump version and push tag
          id: tag
          uses: anothrNick/github-tag-action@1.67.0
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            WITH_V: true
            CUSTOM_TAG: $VERSION

        - name : output the tag
          run: echo "tag=${{ steps.tag.outputs.new_tag }}" >> $GITHUB_OUTPUT

        - name: Release
          uses: softprops/action-gh-release@v1
          with:
            files: |
              build/libs/*
            tag_name: ${{ steps.tag.outputs.new_tag }}
